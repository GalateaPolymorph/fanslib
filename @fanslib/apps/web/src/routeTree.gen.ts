/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as PostsIndexRouteImport } from './routes/posts/index'
import { Route as MediaIndexRouteImport } from './routes/media/index'
import { Route as ChannelsIndexRouteImport } from './routes/channels/index'
import { Route as CalendarIndexRouteImport } from './routes/calendar/index'
import { ServerRoute as ApiShootsServerRouteImport } from './routes/api/shoots'
import { ServerRoute as ApiMediaServerRouteImport } from './routes/api/media'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api/trpc/$'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRouteImport,
} as any)
const MediaIndexRoute = MediaIndexRouteImport.update({
  id: '/media/',
  path: '/media/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChannelsIndexRoute = ChannelsIndexRouteImport.update({
  id: '/channels/',
  path: '/channels/',
  getParentRoute: () => rootRouteImport,
} as any)
const CalendarIndexRoute = CalendarIndexRouteImport.update({
  id: '/calendar/',
  path: '/calendar/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiShootsServerRoute = ApiShootsServerRouteImport.update({
  id: '/api/shoots',
  path: '/api/shoots',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiMediaServerRoute = ApiMediaServerRouteImport.update({
  id: '/api/media',
  path: '/api/media',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarIndexRoute
  '/channels': typeof ChannelsIndexRoute
  '/media': typeof MediaIndexRoute
  '/posts': typeof PostsIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/calendar': typeof CalendarIndexRoute
  '/channels': typeof ChannelsIndexRoute
  '/media': typeof MediaIndexRoute
  '/posts': typeof PostsIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/calendar/': typeof CalendarIndexRoute
  '/channels/': typeof ChannelsIndexRoute
  '/media/': typeof MediaIndexRoute
  '/posts/': typeof PostsIndexRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/calendar' | '/channels' | '/media' | '/posts' | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/calendar' | '/channels' | '/media' | '/posts' | '/settings'
  id:
    | '__root__'
    | '/'
    | '/calendar/'
    | '/channels/'
    | '/media/'
    | '/posts/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CalendarIndexRoute: typeof CalendarIndexRoute
  ChannelsIndexRoute: typeof ChannelsIndexRoute
  MediaIndexRoute: typeof MediaIndexRoute
  PostsIndexRoute: typeof PostsIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/media': typeof ApiMediaServerRoute
  '/api/shoots': typeof ApiShootsServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/media': typeof ApiMediaServerRoute
  '/api/shoots': typeof ApiShootsServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/media': typeof ApiMediaServerRoute
  '/api/shoots': typeof ApiShootsServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/media' | '/api/shoots' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/media' | '/api/shoots' | '/api/trpc/$'
  id: '__root__' | '/api/media' | '/api/shoots' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiMediaServerRoute: typeof ApiMediaServerRoute
  ApiShootsServerRoute: typeof ApiShootsServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/media/': {
      id: '/media/'
      path: '/media'
      fullPath: '/media'
      preLoaderRoute: typeof MediaIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/channels/': {
      id: '/channels/'
      path: '/channels'
      fullPath: '/channels'
      preLoaderRoute: typeof ChannelsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/calendar/': {
      id: '/calendar/'
      path: '/calendar'
      fullPath: '/calendar'
      preLoaderRoute: typeof CalendarIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/shoots': {
      id: '/api/shoots'
      path: '/api/shoots'
      fullPath: '/api/shoots'
      preLoaderRoute: typeof ApiShootsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/media': {
      id: '/api/media'
      path: '/api/media'
      fullPath: '/api/media'
      preLoaderRoute: typeof ApiMediaServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CalendarIndexRoute: CalendarIndexRoute,
  ChannelsIndexRoute: ChannelsIndexRoute,
  MediaIndexRoute: MediaIndexRoute,
  PostsIndexRoute: PostsIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiMediaServerRoute: ApiMediaServerRoute,
  ApiShootsServerRoute: ApiShootsServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
