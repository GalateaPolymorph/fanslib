schema {
  query: APIQuery
  mutation: APIMutation
}

"""
Exposes a URL that specifies the behavior of this scalar.
"""
directive @specifiedBy(
  """
  The URL that specifies the behavior of this scalar.
  """
  url: String!
) on SCALAR

type _PostType {
  redditUsername: String
  title: String
}

type _ResultType {
  upvotes: Int
  comments: Int
  url: String
  dateCreated: DateTime
}

type AccountAggregates {
  username: String
  totalPosts: Int
  totalUpvotes: Int
  totalComments: Int
  avgUpvotes: Float
  avgComments: Float
}

"""
A smaller User type that is used when accessing an account's members. This
smaller version leaves out some sensitive fields, such as a user's API token.
"""
type AccountMember {
  id: ID!
  hashedId: String
  username: String!

  """
  The confirmed, in-force email. This is only set if the user goes through the email confirmation process.
  """
  email: String

  """
  An email that is pending confirmation.
  """
  pendingEmail: String!
  fullName: String!
  timezone: String
  registeredAt: DateTime!
  isActive: Boolean!
  managesAllAccounts: Boolean!
  managedSocialAccounts: [SocialAccountType!]!
  managedRedditAccounts: [RedditUserType!]!
  managedClients: [ClientType!]!
  contentPermission: ContentPermissionType
  inboxPermission: InboxPermissionType
  subredditManagerPermission: SubredditManagerPermissionType
  canAccessAnalytics: Boolean
  canAccessSettingsIpProxies: Boolean
  canAccessSettingsDataExport: Boolean
  canAccessSettingsContentHosts: Boolean
  canAccessSettingsCustomSchedules: Boolean
  canAccessDefaultPostSettings: Boolean
  canManageMembers: Boolean
  canConnectSocialAccounts: Boolean
  canManageAllSocialAccounts: Boolean
}

"""
An enumeration.
"""
enum AccountsAccountSubscriptionStatusChoices {
  """
  Incomplete
  """
  INCOMPLETE

  """
  Expired
  """
  INCOMPLETE_EXPIRED

  """
  Trialing
  """
  TRIALING

  """
  Active
  """
  ACTIVE

  """
  Past due
  """
  PAST_DUE

  """
  Canceled
  """
  CANCELED

  """
  Unpaid
  """
  UNPAID

  """
  Paused
  """
  PAUSED

  """
  None
  """
  NONE
}

type AccountType {
  id: ID!
  name: String!
  plan: PlanType!
  billingTerm: BillingTerm
  stripeCustomerId: String!
  subscriptionId: String!
  subscriptionStatus: AccountsAccountSubscriptionStatusChoices!
  currentPeriodEnd: DateTime
  dateCreated: DateTime!
  dateUpdated: DateTime!

  """
  Whether the account supports social media platforms beyond Reddit or not
  """
  supportsMultipleSocialPlatforms: Boolean!

  """
  The number of monthly social media posts (other than Tweets) that this account is allowed to submit
  """
  allowedMonthlyPosts: Int!

  """
  The number of monthly social media posts that accounts that do not support
  multiple social platforms can schedule per month from new non-Twitter
  platforms, such as Instagram or other new platforms.
  """
  allowedMonthlyNewPlatformPosts: Int!

  """
  The number of monthly Tweets this account is allowed to submit
  """
  allowedMonthlyTweets: Int!

  """
  The number of monthly DMs this account is allowed to submit
  """
  allowedMonthlyDms: Int!

  """
  The number of social accounts this Postpone account is allowed to connect
  """
  allowedRedditAccounts: Int!
  allowedContentStorage: BigInt

  """
  Set to True to allow a user to use Fresh Links
  """
  canUseFreshLinks: Boolean!

  """
  Whether this plan supports multiple users per account
  """
  hasMultiUser: Boolean!
  hasPremiumSupport: Boolean!

  """
  Whether the Account can access the Client Manager
  """
  hasClientManager: Boolean!
  hasApiAccess: Boolean!

  """
  Whether this account supports auto-retweets or not
  """
  canUseAutoRetweet: Boolean!
  aiAssistantAccess: String
  postsSubmittedThisMonth: Int
  instagramPostsSubmittedThisMonth: Int
  tweetsSubmittedThisMonth: Int
  dmsSentThisMonth: Int
  churnkeyHash: String
  humanReadableAllowedContentStorage: String
  ownerId: ID
  allowedSocialAccounts: Int
  clientCount: Int
}

type AcknowledgeSubmissionErrors {
  success: Boolean
  errors: [String]
}

type AddModAlert {
  success: Boolean
}

"""
An enumeration.
"""
enum AllowRepliesFrom {
  NOBODY
  EVERYBODY
  MENTIONED_USERS
  FOLLOWED_USERS
}

type AnalyticsSubmissionPaginatedListType {
  total: Int
  objects: [AnalyticsSubmissionType]
}

type AnalyticsSubmissionType {
  platformId: ID
  dateSubmitted: DateTime
  socialAccount: SocialAccountType
  text: String
  url: String
  thumbnailUrl: String
  target: String
  metrics: [MetricType]
}

type AnalyticsWordCloudType {
  words: [AnalyticsWordCloudWordType]
}

type AnalyticsWordCloudWordType {
  word: String
  count: Int
}

type APIMutation {
  scheduleYouTubePost(input: ScheduleYouTubePostInput!): ScheduleYouTubePost
  scheduleTweet(input: ScheduleTweetInput!): ScheduleTweet
  scheduleTumblrPost(input: ScheduleTumblrPostInput!): ScheduleTumblrPost
  scheduleTikTokPost(input: ScheduleTikTokPostInput!): ScheduleTikTokPost
  scheduleThreadsPost(input: ScheduleThreadsPostInput!): ScheduleThreadsPost
  createRedditPost(
    campaignId: String
    comment: String
    content: String
    gallery: GalleryInput
    imageId: String

    """
    Deprecated, do not use
    """
    imageUploadLocation: String
    link: String
    media: MediaInput

    """
    Name of a file in the account's Content Library. Postpone will use the first matching file. Case-insensitive.
    """
    mediaName: String

    """
    URL of a file to be used in the post. The file will be added to your Content Library.
    """
    mediaUrl: String
    nsfw: Boolean
    pollChoices: [String]
    pollDuration: Int
    publishingStatus: PublishingStatusType = READY_TO_PUBLISH
    redditUsername: String
    sendRepliesToInbox: Boolean
    skipPostRequirementsValidation: Boolean
    spoiler: Boolean
    submissions: [SubmissionInput]!
    title: String!
  ): CreateRedditPost
  bulkCreateRedditPosts(
    """
    Byte array of posts compressed with Zlib
    """
    compressedPosts: [Int]
    fileName: String
    posts: [BulkRedditPostInput]
    skipPostRequirementsValidation: Boolean
  ): BulkCreateRedditPosts
  editRedditPost(
    campaignId: String
    comment: String
    content: String
    gallery: GalleryInput
    id: String!
    imageId: String

    """
    Deprecated, do not use
    """
    imageUploadLocation: String
    link: String
    media: MediaInput

    """
    Name of a file in the account's Content Library. Postpone will use the first matching file. Case-insensitive.
    """
    mediaName: String

    """
    URL of a file to be used in the post. The file will be added to your Content Library.
    """
    mediaUrl: String
    nsfw: Boolean
    pollChoices: [String]
    pollDuration: Int
    publishingStatus: PublishingStatusType = READY_TO_PUBLISH
    redditUsername: String
    sendRepliesToInbox: Boolean
    skipPostRequirementsValidation: Boolean
    spoiler: Boolean
    submissions: [SubmissionInput]!
    title: String!
  ): EditRedditPost
  changeRedditPostSubmissionTitle(
    submissionId: ID!
    title: String!
  ): ChangeRedditPostSubmissionTitle
  deleteRedditPost(postId: String!): DeleteRedditPost
  deleteRedditPostSubmission(submissionId: String!): DeleteRedditPostSubmission

  """
  Bulk delete multiple posts from Postpone
  """
  bulkDeleteRedditPosts(postIds: [Int]!): BulkDeleteRedditPosts

  """
  Bulk delete multiple post submissions from Postpone
  """
  bulkDeleteRedditPostSubmissions(submissionIds: [String]!): BulkDeleteRedditPostSubmissions

  """
  Bulk delete multiple submissions from reddit.com
  """
  bulkDeleteRedditSubmissions(submissionIds: [String]!): BulkDeleteRedditSubmissions
  duplicateRedditPost(postId: String!): DuplicateRedditPost
  duplicateRedditPostSubmission(submissionId: ID!): DuplicateRedditPostSubmission

  """
  Submits a Reddit post to Reddit immediately.
  """
  submitRedditPost(postId: String!): SubmitRedditPost

  """
  Submits an individual post submission to Reddit immediately.
  """
  submitRedditSubmission(submissionId: String!): SubmitRedditSubmission
  retryRedditPost(postId: String!): RetryRedditPost
  acknowledgeSubmissionErrors(
    postIds: [String]
    submissionIds: [String]
  ): AcknowledgeSubmissionErrors
  cancelSubmissionAutoRemoval(submissionId: String!): CancelSubmissionAutoRemoval
  deleteRedditSubmission(submissionId: String!): DeleteRedditSubmission
  updateDefaultPostSettings(
    applyToAllPostTemplates: Boolean
    applyToAllPosts: Boolean
    autoSpaceIntervals: [AutoSpaceIntervalInputType]
    frequencyWarningsEnabled: Boolean
    generateFreshLinks: Boolean
    generateFreshLinksAnonymously: Boolean
    gifUploadLocation: String
    imageUploadLocation: String
    maxTries: Int
    nsfw: Boolean
    postType: String
    profileCrosspost: Boolean
    redditUsername: String
    removeAtAmount: Int
    removeAtUnit: String
    removeMinUpvotes: Int
    repostProtectionEnabled: Boolean
    repostProtectionIntervalAmount: Int
    repostProtectionIntervalUnit: String
    sendRepliesToInbox: Boolean
    spoiler: Boolean
    uploadLocation: String
    videoUploadLocation: String
  ): UpdateDefaultPostSettings
  setDefaultPostSettingsFields(input: DefaultPostSettingsInputType!): SetDefaultPostSettingsFields
  addModAlert(moderatorUsername: String!): AddModAlert
  removeModAlert(moderatorUsername: String!): RemoveModAlert
  setFrequencyWarningsEnabled(enabled: Boolean!): SetFrequencyWarningsEnabled
  updateRedditPostSubmissionPostAt(id: ID!, postAt: DateTime!): UpdateRedditPostSubmissionPostAt
  bulkUpdateRedditUsername(
    redditUsername: String!
    submissionIds: [String]
  ): BulkUpdateRedditUsername
  bulkUpdateMovePostAt(
    moveAmount: Int!
    moveDirection: String!
    moveUnit: String!
    submissionIds: [String]
  ): BulkUpdateMovePostAt
  bulkUpdateAutoRemoval(
    removeAtAmount: Int
    removeAtUnit: String
    removeMinUpvotes: Int
    submissionIds: [String]
  ): BulkUpdateAutoRemoval
  bulkUpdateComment(comment: String, submissionIds: [String]): BulkUpdateComment
  bulkUpdatePostOptions(
    nsfw: Boolean
    sendRepliesToInbox: Boolean
    spoiler: Boolean
    submissionIds: [String]
  ): BulkUpdatePostOptions
  bulkUpdateProfileCrosspost(
    profileCrosspost: Boolean
    submissionIds: [String]
  ): BulkUpdateProfileCrosspost
  bulkUpdateAutoSpaceSubmissions(
    spaceAmount: Int
    spaceUnit: String
    submissionIds: [String]
  ): BulkUpdateAutoSpaceSubmissions
  schedulePinterestPost(input: SchedulePinterestPostInput!): SchedulePinterestPost
  scheduleMastodonPost(input: ScheduleMastodonPostInput!): ScheduleMastodonPost
  scheduleLinkedInPost(input: ScheduleLinkedInPostInput!): ScheduleLinkedInPost
  scheduleInstagramPost(input: ScheduleInstagramPostInput!): ScheduleInstagramPost
  scheduleFacebookPost(input: ScheduleFacebookPostInput!): ScheduleFacebookPost
  createCampaign(
    comment: String
    name: String!
    nsfw: Boolean
    postType: String!
    redditUsername: String!
    sendRepliesToInbox: Boolean
    spoiler: Boolean
    submissions: [CampaignDefaultSubmissionInput]!
    title: String!
  ): CreateCampaign
  editCampaign(
    comment: String
    id: String!
    name: String!
    nsfw: Boolean
    postType: String!
    redditUsername: String!
    sendRepliesToInbox: Boolean
    spoiler: Boolean
    submissions: [CampaignDefaultSubmissionInput]!
    title: String!
  ): EditCampaign
  duplicateCampaign(campaignId: String!): DuplicateCampaign
  deleteCampaign(id: String!): DeleteCampaign
  scheduleBlueskyPost(input: ScheduleBlueskyPostInput!): ScheduleBlueskyPost
}

type APIQuery {
  media(
    """
    Sort the results by a field. Supported values: id, mime_type, size, name, and date_created.
    """
    orderBy: String
    page: Int
    limit: Int
    ids: [ID]
    externalIds: [ID]
    imgurUrls: [String]
    search: String
    fileType: FileType
    unusedOnly: Boolean
    unusedInSubreddits: [String]
    unusedInPlatforms: [SocialPlatform]
    labelIds: [ID]
  ): MediaList
  mediaLabels: [MediaLabelType]
  profile: UserType
  accountMembers: [AccountMember]
  timezones: [TimezoneType]
  secureConnectLinks: [SecureConnectLinkType]
  publicSecureConnectLink(token: String): PublicSecureConnectLinkType
  socialAccounts(platform: String): [SocialAccountType]
  subreddit(subreddit: String!): SubredditType
  subreddits(query: String!, limit: Int): [SubredditType]
  searchSubreddits(query: String!, limit: Int): [SubredditType]
  batchSubreddits(subreddits: [String]!): [SubredditType]
  nsfwSubreddits(limit: Int): [InternalSubredditType]
  linkFlair(subreddit: String!): [FlairType]
  postRequirements(subreddit: String!): [SubredditPostRequirementsType]
  analytics(subreddit: String!, timezone: String!): SubredditTopPostsType
  subredditRules(subreddit: String!): [SubredditRuleType]
  redditorSubmissions(username: String!, limit: Int): [RedditSubmissionType]
  redditorPinnedSubmissions(username: String!): [RedditSubmissionType]
  redditor(username: String!): RedditRedditorType
  semanticSubredditSearch(
    query: String!
    limit: Int
    workSafety: SafetyFilter
    minSubscribers: Int
    maxSubscribers: Int
  ): [InternalSubredditType]
  similarSubreddits(
    subredditNames: [String]!
    limit: Int
    workSafety: SafetyFilter
    minSubscribers: Int
    maxSubscribers: Int
  ): [InternalSubredditType]
  subredditsTopSubmissions(subredditNames: [String]!, limit: Int): [InternalRedditSubmissionType]
  redditPost(id: Int!): RedditPostType

  """
  Get a RedditPostSubmission by ID, optionally preparing it for submission
  """
  redditPostSubmission(id: ID!, prepare: Boolean = false): RedditPostSubmissionType
  redditPosts(
    """
    Sort the results by a field. Supported values: post_at
    """
    orderBy: String
    page: Int
    limit: Int
  ): [RedditPostType]
  trashedRedditPosts: [RedditPostType]

  """
  DEPRECATED. Use scheduledSubmissions instead.
  """
  scheduledRedditPosts(
    """
    Sort the results by a field. Supported values: post_at
    """
    orderBy: String
    page: Int
    limit: Int
    startDate: DateTime
    endDate: DateTime
    accounts: [String]
    campaigns: [String]
    media: [String]
    subreddits: [String]
    labels: [String]
    links: [String]
    comments: String
    importGroupId: ID

    """
    Whether results should include posts scheduled to the subreddits or exclude them. Default: True
    """
    includeSubreddits: Boolean

    """
    Whether results should include posts scheduled to subreddits with the provided labels or exclude them. Default: True
    """
    includeLabels: Boolean

    """
    Whether results should include posts scheduled with the provided links or exclude them. Default: True
    """
    includeLinks: Boolean

    """
    Whether results should include posts scheduled from the provided accounts or exclude them. Default: True
    """
    includeAccounts: Boolean

    """
    Whether results should include posts created from the provided Post Templates or exclude them. Default: True
    """
    includeCampaigns: Boolean
    publishingStatus: PublishingStatusType
  ): PostsPaginatedList

  """
  Posts scheduled to be submitted to Reddit in the future. Returns a paginated list of RedditPostSubmissionType.
  """
  scheduledSubmissions(
    """
    Sort the results by a field. Supported values: post_at, reddit_username
    """
    orderBy: String
    page: Int
    limit: Int
    startDate: DateTime
    endDate: DateTime
    accounts: [String]
    clientIds: [ID]
    campaigns: [String]
    media: [String]
    subreddits: [String]
    labels: [String]
    links: [String]
    comments: String
    importGroupId: ID
    socialAccountIds: [ID]
    search: String

    """
    Whether results should include posts scheduled to the subreddits or exclude them. Default: True
    """
    includeSubreddits: Boolean

    """
    Whether results should include posts scheduled to subreddits with the provided labels or exclude them. Default: True
    """
    includeLabels: Boolean

    """
    Whether results should include posts scheduled with the provided links or exclude them. Default: True
    """
    includeLinks: Boolean

    """
    Whether results should include posts scheduled from the provided accounts or exclude them. Default: True
    """
    includeAccounts: Boolean

    """
    Whether results should include posts created from the provided Post Templates or exclude them. Default: True
    """
    includeCampaigns: Boolean

    """
    Whether results should include posts that have already been submitted. Default: False
    """
    includeSubmitted: Boolean

    """
    Whether results should include only overdue submissions. Default: False
    """
    overdueOnly: Boolean
    publishingStatus: PublishingStatusType
    publishingMethod: PublishingMethodType
  ): SubmissionsPaginatedList

  """
  Successful submissions to Reddit. These submissions have a result
  (SubmissionResultType) but not an error (SubmissionErrorType).
  """
  submissions(
    """
    Sort the results by a field. Supported values: date_submitted,
    result__removed_by_category, result__upvotes, result__comments
    """
    orderBy: String
    page: Int
    limit: Int
    startDate: DateTime
    endDate: DateTime
    accounts: [String]
    clientIds: [ID]
    campaigns: [String]
    media: [String]
    subreddits: [String]
    removalCategories: [String]
    labels: [String]
    links: [String]
    title: String
  ): SubmissionsPaginatedList

  """
  Failed submissions to Reddit. These submissions have an error
  (SubmissionErrorType) but not a result (SubmissionResultType).
  """
  submissionsWithErrors(
    """
    Sort the results by a field. Supported values: date_submitted
    """
    orderBy: String
    page: Int
    limit: Int
    startDate: DateTime
    endDate: DateTime
    accounts: [String]
    clientIds: [ID]
    errorCodes: [String]
    subreddits: [String]
    media: [String]
    title: String
  ): SubmissionsPaginatedList
  scheduledPostAnalytics(
    accounts: [String]
    campaigns: [String]
    subreddits: [String]
  ): ScheduledPostAnalyticsType
  uniqueSubreddits(limit: Int, startDate: DateTime, endDate: DateTime): [String]
  lastSubmission(subreddit: String!): RedditPostSubmissionType
  nextSubmission(subreddit: String!): RedditPostSubmissionType
  previousTitles(text: String!): [PreviousTitleType]
  importGroup(id: ID!): ImportGroupType
  recentImportGroups: [ImportGroupType]
  redditSubmissions(
    startDate: DateTime
    endDate: DateTime
    accounts: [String]
    sortField: SortFieldType
    page: Int
    limit: Int
    mediaIds: [ID]
    clientIds: [ID]
    socialAccountIds: [ID]
    search: String
    campaigns: [String]
    subreddits: [String]
    labels: [String]
    links: [String]
    removalCategories: [String]
    errorCodes: [String]
    submissionType: SubmissionType
  ): SubmissionsPaginatedList
  hashtagGroups: [HashtagGroupType]
  campaign(id: Int!): CampaignType
  campaigns(accounts: [String], subreddits: [String]): [CampaignType]
  postTemplates(
    accounts: [String]
    subreddits: [String]
    orderBy: String
    page: Int
    limit: Int
  ): PostTemplatePaginatedList
  uniqueCampaignsSubreddits: [String]
  postTimeSeriesMetrics(
    startDate: DateTime!
    endDate: DateTime!
    socialAccountId: ID
    socialAccountIds: [ID]
    subreddits: [String]
    campaigns: [ID]
    metrics: [String]
    groupBy: String
  ): [MetricsDataPointType]
  analyticsSubmissions(
    startDate: DateTime
    endDate: DateTime
    socialAccountIds: [ID]
    subreddits: [String]
    campaigns: [ID]
    page: Int
    limit: Int
    orderBy: String
    unlinked: Boolean
  ): AnalyticsSubmissionPaginatedListType
  aggregatePostMetrics(
    socialAccountId: ID
    socialAccountIds: [ID]
    startDate: DateTime!
    endDate: DateTime!
    campaigns: [ID]
    subreddits: [String]
    metrics: [String]
  ): MetricsAggregatesType
  analyticsPostWordCloud(
    socialAccountIds: [ID]
    startDate: DateTime!
    endDate: DateTime!
    campaigns: [ID]
    subreddits: [String]
  ): AnalyticsWordCloudType
  postAnalytics(
    startDate: DateTime
    endDate: DateTime
    accounts: [String]
    campaigns: [String]
    subreddits: [String]
    groupBy: String
  ): PostAnalyticsType
  twitterAnalytics(
    startDate: DateTime!
    endDate: DateTime!
    socialAccountId: ID!
    groupBy: String
  ): TwitterAnalyticsType
  threadsAnalytics(
    startDate: DateTime!
    endDate: DateTime!
    socialAccountId: ID!
    groupBy: String
  ): ThreadsAnalyticsType
  instagramAnalytics(
    startDate: DateTime!
    endDate: DateTime!
    socialAccountId: ID!
    groupBy: String
  ): InstagramAnalyticsType
  facebookAnalytics(
    startDate: DateTime!
    endDate: DateTime!
    socialAccountId: ID!
    groupBy: String
  ): FacebookAnalyticsType
  tiktokAnalytics(
    startDate: DateTime!
    endDate: DateTime!
    socialAccountId: ID!
    groupBy: String
  ): TikTokAnalyticsType
  linkedinAnalytics(
    startDate: DateTime!
    endDate: DateTime!
    socialAccountId: ID!
    groupBy: String
  ): LinkedInAnalyticsType
  youtubeAnalytics(
    startDate: DateTime!
    endDate: DateTime!
    socialAccountId: ID!
    groupBy: String
  ): YouTubeAnalyticsType
  blueskyAnalytics(
    startDate: DateTime!
    endDate: DateTime!
    socialAccountId: ID!
    groupBy: String
  ): BlueskyAnalyticsType
  tumblrAnalytics(
    startDate: DateTime!
    endDate: DateTime!
    socialAccountId: ID!
    groupBy: String
  ): TumblrAnalyticsType
  mastodonAnalytics(
    startDate: DateTime!
    endDate: DateTime!
    socialAccountId: ID!
    groupBy: String
  ): MastodonAnalyticsType
  redditorAnalytics(
    startDate: DateTime
    endDate: DateTime
    accounts: [String]
    groupBy: String
  ): RedditorAnalyticsType
  socialAccountAnalytics(
    socialAccountId: ID
    socialAccountIds: [ID]
    startDate: DateTime!
    endDate: DateTime
    groupBy: String
  ): SocialAccountAnalyticsType
  hourlyEngagement(socialAccountId: ID!): EngagementType
  _debug: DjangoDebug
}

input AutoSpaceIntervalInputType {
  amount: Int
  unit: String
}

type AutoSpaceIntervalType {
  amount: Int
  unit: String
}

"""
The `BigInt` scalar type represents non-fractional whole numeric values.
`BigInt` is not constrained to 32-bit like the `Int` type and thus is a less
compatible type.
"""
scalar BigInt

enum BillingTerm {
  NONE
  MONTHLY
  YEARLY
}

type BlueskyAnalyticsType {
  totalPosts: Int
  totalLikes: Int
  totalReplies: Int
  totalReposts: Int
  avgLikes: Float
  topSubmissions: [TopBlueskyPostSubmissionType]
  dataPoints: [BlueskyPostSubmissionAnalyticsDataPointType]
}

"""
An enumeration.
"""
enum BlueskyBlueskyPostAllowRepliesFromChoices {
  """
  Nobody
  """
  NOBODY

  """
  Everybody
  """
  EVERYBODY

  """
  Mentioned users
  """
  MENTIONED_USERS

  """
  Followed users
  """
  FOLLOWED_USERS
}

type BlueskyPostSubmissionAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  date: DateTime
  totalPosts: Int
  totalLikes: Int
  avgLikes: Float
  totalReplies: Int
  totalReposts: Int
}

input BlueskyPostSubmissionInputType {
  id: ID
  text: String!
  gallery: GalleryInput

  """
  Name of a file in the account's Content Library. Postpone will use the first matching file. Case-insensitive.
  """
  mediaName: String

  """
  URL of a file to be used in the post. The file will be added to your Content Library.
  """
  mediaUrl: String
  contentWarning: ContentWarning!

  """
  IETF BCP 47 language codes
  """
  languages: [String]

  """
  Additional tags on the post
  """
  tags: [String]
  order: Int!
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountInputType
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  final: Boolean
}

type BlueskyPostSubmissionType implements SocialSubmissionInterface {
  id: ID
  postAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  text: String!
  gallery: GalleryType
  contentWarning: ContentWarning

  """
  IETF language codes for each language used in the post
  """
  languages: [String!]!

  """
  Additional hashtags, in addition to any included in post text and facets
  """
  tags: [String!]!
  order: Int!
  final: Boolean!
  globalId: ID
  target: String
  platform: String
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  removeAt: DateTime
  publishingStatus: PublishingStatusType
}

type BlueskyPostType implements SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  publishingStatus: PublishingStatusType
  allowRepliesFrom: BlueskyBlueskyPostAllowRepliesFromChoices
  submissions: [BlueskyPostSubmissionType]
  dateUpdated: DateTime
  createdHow: String
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
}

type BulkCreateRedditPosts {
  success: Boolean
  errors: [String]
  importGroupId: ID
  validationErrors: [RowValidationErrorType]
  row: Int
}

"""
Bulk delete multiple posts from Postpone
"""
type BulkDeleteRedditPosts {
  success: Boolean
  errors: [String]
}

"""
Bulk delete multiple post submissions from Postpone
"""
type BulkDeleteRedditPostSubmissions {
  success: Boolean
  errors: [String]
}

"""
Bulk delete multiple submissions from reddit.com
"""
type BulkDeleteRedditSubmissions {
  success: Boolean
  errors: [String]
}

input BulkRedditPostInput {
  title: String!
  content: String
  link: String
  subreddit: String!
  comment: String
  user: String!
  postAt: DateTime!
  flair: String
  replies: Boolean
  nsfw: Boolean
  spoiler: Boolean
  campaign: Int
  manual: Boolean
}

type BulkUpdateAutoRemoval {
  success: Boolean
  errors: [String]
  updatedCount: Int
}

type BulkUpdateAutoSpaceSubmissions {
  success: Boolean
  errors: [String]
  updatedCount: Int
}

type BulkUpdateComment {
  success: Boolean
  errors: [String]
  updatedCount: Int
}

type BulkUpdateMovePostAt {
  success: Boolean
  errors: [String]
  updatedCount: Int
}

type BulkUpdatePostOptions {
  success: Boolean
  errors: [String]
  updatedCount: Int
}

type BulkUpdateProfileCrosspost {
  success: Boolean
  errors: [String]
  updatedCount: Int
}

type BulkUpdateRedditUsername {
  success: Boolean
  errors: [String]
  updatedCount: Int
}

type CampaignAggregates {
  campaignId: String
  campaignName: String
  totalPosts: Int
  totalUpvotes: Int
  totalComments: Int
  avgUpvotes: Float
  avgComments: Float
}

input CampaignDefaultSubmissionInput {
  id: String

  """
  Internal ID to map response validation errors to specific submissions and link to a parent submission in crosspost_from
  """
  validationId: String
  subreddit: String!
  title: String
  redditUsername: String
  comment: String
  overrideComment: Boolean
  profileCrosspost: Boolean

  """
  The validation_id of the parent submission to crosspost from
  """
  crosspostFrom: String
  flairId: String
  postAtWeekday: Int
  postAtWeekOffset: String
  postAtTime: Time
  postAtExpression: String
  removeAtAmount: Int
  removeAtUnit: String
  removeMinUpvotes: Int
  order: Int
}

type CampaignDefaultSubmissionType {
  id: ID!
  campaign: CampaignType!
  subreddit: String!

  """
  Title override for the subreddit submission
  """
  title: String!

  """
  The Reddit username to submit the post as (crossposts only)
  """
  redditUsername: String!

  """
  Comment override for the subreddit submission
  """
  comment: String!

  """
  Indicates the submission should override the post comment, either by
  submitting no comment or submitting a different comment
  """
  overrideComment: Boolean!
  flairId: String!

  """
  Immediately crosspost this submission to the user's profile
  """
  profileCrosspost: Boolean!
  crosspostFrom: CampaignDefaultSubmissionType

  """
  The weekday number in ISO format (1=Monday, 7=Sunday)
  """
  postAtWeekday: Int
  postAtWeekOffset: String
  postAtTime: Time

  """
  The expression to use to calculate post_at. Example: "best_next_7_days".
  """
  postAtExpression: String!

  """
  The number of hours or days after the post should be removed
  """
  removeAtAmount: Int
  removeAtUnit: String

  """
  The karma threshold required to remove the submission from Reddit. Only posts with karma lower than this will be removed.
  """
  removeMinUpvotes: Int
  order: Int!
}

"""
An enumeration.
"""
enum CampaignsCampaignPostTypeChoices {
  """
  No preference
  """
  NO_PREFERENCE

  """
  Self-post
  """
  SELF

  """
  Link post
  """
  LINK

  """
  Image post
  """
  IMAGE

  """
  Poll post
  """
  POLL
}

type CampaignType {
  id: ID!
  name: String!

  """
  The Reddit username to submit the post as
  """
  redditUsername: String!
  title: String!
  comment: String!
  postType: CampaignsCampaignPostTypeChoices!
  sendRepliesToInbox: Boolean!
  nsfw: Boolean!
  spoiler: Boolean!
  dateCreated: DateTime!
  submissions: [CampaignDefaultSubmissionType!]!
}

type CancelSubmissionAutoRemoval {
  success: Boolean
  errors: [String]
}

type ChangeRedditPostSubmissionTitle {
  success: Boolean
  validationErrors: [ValidationErrorType]
}

type ClientType {
  id: ID!
  name: String!
  email: String!
  website: String!
  socialAccounts: [SocialAccountType!]!
  redditAccounts: [RedditUserType!]!
  connectLink: PublicClientConnectLinkType
}

"""
An enumeration.
"""
enum CommunityLabel {
  FOR_EVERYONE
  MATURE
  DRUGS
  VIOLENCE
  SEXUAL_THEMES
}

"""
An enumeration.
"""
enum ContentPermissionType {
  FULL
  OWN_CONTENT
}

"""
An enumeration.
"""
enum ContentWarning {
  NONE
  SUGGESTIVE
  NUDITY
  PORN
}

type CoverImageType {
  id: ID!
  account: AccountType!
  name: String!
  altText: String!
  url: String!
  externalId: String!
  mimeType: String!

  """
  Media size in bytes
  """
  size: BigInt!
  source: String!
  createdBy: AccountMember
  dateCreated: DateTime!
  dateUpdated: DateTime!

  """
  The time in ms of the frame that represents the video cover.
  """
  offsetMs: Int
}

type CreateCampaign {
  success: Boolean
  errors: [String]
}

type CreateRedditPost {
  success: Boolean
  errors: [String]
  validationErrors: [ValidationErrorType]
  redditPost: RedditPostType
}

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

input DefaultPostSettingsInputType {
  postType: String
  maxTries: Int
  redditUsername: String
  sendRepliesToInbox: Boolean
  nsfw: Boolean
  spoiler: Boolean
  profileCrosspost: Boolean
  uploadLocation: String
  imageUploadLocation: String
  gifUploadLocation: String
  videoUploadLocation: String
  generateFreshLinks: Boolean
  generateFreshLinksAnonymously: Boolean
  autoSpaceIntervals: [AutoSpaceIntervalInputType]
  removeAtAmount: Int
  removeAtUnit: String
  removeMinUpvotes: Int
  applyToAllPosts: Boolean
  applyToAllPostTemplates: Boolean
  frequencyWarningsEnabled: Boolean
  repostProtectionEnabled: Boolean
  repostProtectionIntervalAmount: Int
  repostProtectionIntervalUnit: String
}

type DefaultPostSettingsType {
  id: ID!
  postType: PostsDefaultPostSettingsPostTypeChoices!

  """
  The maximum number of times we will reschedule a post that fails
  """
  maxTries: Int!

  """
  The Reddit username to submit the post as
  """
  redditUsername: String!
  profileCrosspost: Boolean!
  sendRepliesToInbox: Boolean!
  nsfw: Boolean!
  spoiler: Boolean!

  """
  The number of hours or days after the post should be removed
  """
  removeAtAmount: Int
  removeAtUnit: String

  """
  The karma threshold required to remove the submission from Reddit. Only posts with karma lower than this will be removed.
  """
  removeMinUpvotes: Int
  uploadLocation: String
  imageUploadLocation: String
  gifUploadLocation: String
  videoUploadLocation: String

  """
  Global flag to disable subreddit frequency warnings across all subreddits
  """
  frequencyWarningsEnabled: Boolean!

  """
  Global flag to disable repost protection across all subreddits
  """
  repostProtectionEnabled: Boolean!

  """
  The number of months allowed between reposts
  """
  repostProtectionIntervalAmount: Int!
  repostProtectionIntervalUnit: String

  """
  Generate unique Imgur links for each submission
  """
  generateFreshLinks: Boolean!

  """
  Upload fresh links anonymously, not to the user's Imgur account
  """
  generateFreshLinksAnonymously: Boolean!
  modAlerts: [String]
  autoSpaceIntervals: [AutoSpaceIntervalType]
}

type DeleteCampaign {
  success: Boolean
  errors: [String]
}

type DeleteRedditPost {
  success: Boolean
  errors: [String]
}

type DeleteRedditPostSubmission {
  success: Boolean
  errors: [String]
}

type DeleteRedditSubmission {
  success: Boolean
  errors: [String]
}

"""
Debugging information for the current query.
"""
type DjangoDebug {
  """
  Executed SQL queries for this API query.
  """
  sql: [DjangoDebugSQL]

  """
  Raise exceptions for this API query.
  """
  exceptions: [DjangoDebugException]
}

"""
Represents a single exception raised.
"""
type DjangoDebugException {
  """
  The class of the exception
  """
  excType: String!

  """
  The message of the exception
  """
  message: String!

  """
  The stack trace
  """
  stack: String!
}

"""
Represents a single database query made to a Django managed DB.
"""
type DjangoDebugSQL {
  """
  The type of database being used (e.g. postrgesql, mysql, sqlite).
  """
  vendor: String!

  """
  The Django database alias (e.g. 'default').
  """
  alias: String!

  """
  The actual SQL sent to this database.
  """
  sql: String

  """
  Duration of this database query in seconds.
  """
  duration: Float!

  """
  The raw SQL of this query, without params.
  """
  rawSql: String!

  """
  JSON encoded database query parameters.
  """
  params: String!

  """
  Start time of this database query.
  """
  startTime: Float!

  """
  Stop time of this database query.
  """
  stopTime: Float!

  """
  Whether this database query took more than 10 seconds.
  """
  isSlow: Boolean!

  """
  Whether this database query was a SELECT.
  """
  isSelect: Boolean!

  """
  Postgres transaction ID if available.
  """
  transId: String

  """
  Postgres transaction status if available.
  """
  transStatus: String

  """
  Postgres isolation level if available.
  """
  isoLevel: String

  """
  Postgres connection encoding if available.
  """
  encoding: String
}

type DuplicateCampaign {
  success: Boolean
  errors: [String]
  newCampaign: CampaignType
}

type DuplicateRedditPost {
  success: Boolean
  errors: [String]
  newPost: RedditPostType
}

type DuplicateRedditPostSubmission {
  success: Boolean
  errors: [String]
  newPost: RedditPostType
}

type EditCampaign {
  success: Boolean
  errors: [String]
}

type EditRedditPost {
  success: Boolean
  errors: [String]
  validationErrors: [ValidationErrorType]
}

type EngagementType {
  engagement: [HourlyEngagementType]
  dataSource: String
}

type FacebookAnalyticsType {
  totalPosts: Int
  avgLikes: Float
  totalLikes: Int
  totalComments: Int
  totalImpressions: Int
  totalImpressionsUnique: Int
  totalEngagedUsers: Int
  totalEngagedFan: Int
  totalVideoViews: Int
  totalClicks: Int
  totalClicksUnique: Int
  topSubmissions: [TopFacebookSubmissionType]
  dataPoints: [FacebookSubmissionAnalyticsDataPointType]
}

"""
An enumeration.
"""
enum FacebookFacebookPostSubmissionMediaTypeChoices {
  """
  Post
  """
  POST

  """
  Reel
  """
  REEL

  """
  Story
  """
  STORY
}

"""
An enumeration.
"""
enum FacebookMediaType {
  POST
  REEL
  STORY
}

input FacebookPostSubmissionInputType {
  id: ID
  postAt: DateTime!
  mediaType: FacebookMediaType!
}

type FacebookPostSubmissionType implements SocialSubmissionInterface {
  id: ID
  postAt: DateTime
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  mediaType: FacebookFacebookPostSubmissionMediaTypeChoices!
  globalId: ID
  target: String
  platform: String
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  removeAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  publishingStatus: PublishingStatusType
}

type FacebookPostType implements SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  publishingStatus: PublishingStatusType
  text: String!
  gallery: GalleryType
  submissions: [FacebookPostSubmissionType]
  dateUpdated: DateTime
  createdHow: String
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
}

type FacebookSubmissionAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  date: DateTime
  totalPosts: Int
  avgLikes: Float
  totalLikes: Int
  totalComments: Int
  totalImpressions: Int
  totalImpressionsUnique: Int
  totalEngagedUsers: Int
  totalEngagedFan: Int
  totalVideoViews: Int
  totalClicks: Int
  totalClicksUnique: Int
}

enum FileType {
  ALL
  VIDEO
  IMAGE
  GIF
}

type FlairType {
  id: String
  text: String
}

input GalleryInput {
  id: ID
  galleryMediaSet: [GalleryMediaInput]!
}

input GalleryMediaInput {
  id: ID
  caption: String
  outboundUrl: String
  media: MediaInput!
  order: Int!
}

type GalleryMediaType {
  id: ID!
  media: MediaType
  caption: String!
  outboundUrl: String!
  order: Int!
}

type GalleryType {
  id: ID!
  galleryMediaSet: [GalleryMediaType]
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

type HashtagGroupType {
  id: ID!
  name: String!
  hashtags: [HashtagType!]!
  color: String!
}

type HashtagType {
  id: ID!

  """
  Hashtag name without #
  """
  name: String!
}

type HourlyEngagementType {
  weekday: Int
  hour: Int
  value: Float
}

type HourlyPostType {
  day: Int
  hour: Int
  posts: Int
}

type ImportErrorType {
  message: String
}

type ImportGroupType {
  id: ID!
  fileName: String!
  status: PostsImportGroupStatusChoices!
  postCount: Int
  errors: [ImportErrorType]
  dateCreated: DateTime!
}

"""
An enumeration.
"""
enum InboxPermissionType {
  FULL
  COMMENTS_ONLY
  MESSAGES_ONLY
  NONE
}

type InstagramAnalyticsType {
  totalPosts: Int
  avgLikes: Float
  totalLikes: Int
  totalComments: Int
  totalFollows: Int
  totalShares: Int
  totalProfileActivity: Int
  totalProfileVisits: Int
  totalTotalInteractions: Int
  totalImpressions: Int
  totalReach: Int
  topSubmissions: [TopInstagramSubmissionType]
  dataPoints: [InstagramSubmissionAnalyticsDataPointType]
  totalCarouselAlbumEngagement: Int
  totalCarouselAlbumImpressions: Int
  totalCarouselAlbumReach: Int
}

"""
An enumeration.
"""
enum InstagramInstagramPostSubmissionMediaTypeChoices {
  """
  Feed post
  """
  FEED_POST

  """
  Carousel
  """
  CAROUSEL

  """
  Reel
  """
  REEL

  """
  Story
  """
  STORY
}

"""
An enumeration.
"""
enum InstagramMediaType {
  FEED_POST
  CAROUSEL
  REEL
  STORY
}

input InstagramPostSubmissionInputType {
  id: ID
  postAt: DateTime!
  mediaType: InstagramMediaType!
  shareToFeed: Boolean = false
}

type InstagramPostSubmissionType implements SocialSubmissionInterface {
  id: ID
  postAt: DateTime
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  mediaType: InstagramInstagramPostSubmissionMediaTypeChoices!

  """
  Whether a reel should be shared to the main feed as well
  """
  shareToFeed: Boolean!
  globalId: ID
  target: String
  platform: String
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  removeAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  publishingStatus: PublishingStatusType
}

type InstagramPostType implements SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  publishingStatus: PublishingStatusType
  caption: String!
  collaborators: [String]

  """
  The first comment to be posted with the post
  """
  firstComment: String!
  gallery: GalleryType!
  submissions: [InstagramPostSubmissionType]
  dateUpdated: DateTime
  createdHow: String
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
}

type InstagramSubmissionAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  date: DateTime
  totalPosts: Int
  avgLikes: Float
  totalLikes: Int
  totalComments: Int
  totalFollows: Int
  totalShares: Int
  totalProfileActivity: Int
  totalProfileVisits: Int
  totalTotalInteractions: Int
  totalImpressions: Int
  totalReach: Int
  totalCarouselAlbumEngagement: Int
  totalCarouselAlbumImpressions: Int
  totalCarouselAlbumReach: Int
}

type InternalRedditSubmissionType {
  redditId: String!
  dateCreated: DateTime!
  author: String!
  title: String!
  domain: String!
  upvotes: Int!
  comments: Int!
  gilded: Int!
  nsfw: Boolean!
  numCrossposts: Int!
  permalink: String!
  postType: RedditSubmissionPostTypeChoices!
  linkFlairText: String!
  subredditName: String
}

type InternalSubredditType {
  name: String!
  redditId: String!
  subscribers: Int!
  nsfw: Boolean!
  public: Boolean!
  banned: Boolean!
  subredditType: String!
  moderators: [SubredditModeratorType]
  activeUserCount: Int
  communityIcon: String
  iconImg: String
  dateCreated: DateTime
  descriptionHtml: String
  keyColor: String
  primaryColor: String
  publicDescription: String
  submissionType: String
  title: String
  isCrosspostableSubreddit: Boolean
  verificationRequired: Boolean
  verificationRequirement: String
  linkFlair: [FlairType]
  allowGalleries: Boolean
  allowPolls: Boolean
  allowVideos: Boolean
  allowImages: Boolean
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type LinkedInAnalyticsType {
  totalPosts: Int
  totalLikes: Int
  totalComments: Int
  totalImpressions: Int
  avgLikes: Float
  topSubmissions: [TopLinkedInPostSubmissionType]
  dataPoints: [LinkedInPostSubmissionAnalyticsDataPointType]
}

"""
An enumeration.
"""
enum LinkedinLinkedInPostVisibilityChoices {
  """
  Public
  """
  PUBLIC

  """
  Connections
  """
  CONNECTIONS

  """
  Logged in users
  """
  LOGGED_IN
}

type LinkedInPostSubmissionAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  date: DateTime
  totalPosts: Int
  totalLikes: Int
  totalComments: Int
  totalImpressions: Int
  avgLikes: Float
}

input LinkedInPostSubmissionInputType {
  id: ID
  postAt: DateTime!
}

type LinkedInPostSubmissionType implements SocialSubmissionInterface {
  id: ID
  postAt: DateTime
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  globalId: ID
  target: String
  platform: String
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  removeAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  publishingStatus: PublishingStatusType
}

type LinkedInPostType implements SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  publishingStatus: PublishingStatusType

  """
  The main text of the post (aka commentary).
  """
  text: String!

  """
  The article URL (article-only field).
  """
  link: String!

  """
  The visibility of the post.
  """
  visibility: LinkedinLinkedInPostVisibilityChoices!
  gallery: GalleryType
  submissions: [LinkedInPostSubmissionType]
  dateUpdated: DateTime
  createdHow: String
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
}

type MastodonAnalyticsType {
  totalPosts: Int
  totalLikes: Int
  totalReplies: Int
  totalReposts: Int
  avgLikes: Float
  topSubmissions: [TopMastodonPostSubmissionType]
  dataPoints: [MastodonPostSubmissionAnalyticsDataPointType]
}

"""
An enumeration.
"""
enum MastodonMastodonPostSubmissionVisibilityChoices {
  """
  Public
  """
  PUBLIC

  """
  Unlisted
  """
  UNLISTED

  """
  Private
  """
  PRIVATE

  """
  Direct
  """
  DIRECT
}

type MastodonPostSubmissionAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  date: DateTime
  totalPosts: Int
  totalLikes: Int
  avgLikes: Float
  totalReplies: Int
  totalReposts: Int
}

input MastodonPostSubmissionInputType {
  id: ID
  text: String!
  gallery: GalleryInput
  contentWarning: String
  language: String
  visibility: String!
  order: Int!
  final: Boolean
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountInputType
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
}

type MastodonPostSubmissionType implements SocialSubmissionInterface {
  id: ID
  postAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  text: String!
  gallery: GalleryType
  contentWarning: String!

  """
  ISO 639 language codes for the language used in the post
  """
  language: String!
  visibility: MastodonMastodonPostSubmissionVisibilityChoices!
  order: Int!
  final: Boolean!
  globalId: ID
  target: String
  platform: String
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  removeAt: DateTime
  publishingStatus: PublishingStatusType
}

type MastodonPostType implements SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  publishingStatus: PublishingStatusType
  submissions: [MastodonPostSubmissionType]
  dateUpdated: DateTime
  createdHow: String
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
}

input MediaInput {
  name: String!
  altText: String
  url: String!
  externalId: String!
  mimeType: String!
  size: BigInt!
  source: String!

  """
  The image or video content info from Uploadcare
  """
  contentInfo: GenericScalar
  imgurUrl: String
  hostedUrl: String
  labels: [MediaLabelInput]
}

input MediaLabelInput {
  id: String
  text: String!
  color: String!
}

type MediaLabelType {
  id: ID!
  text: String!
  color: String!
}

type MediaList {
  total: Int
  objects: [MediaType]
}

type MediaType {
  id: ID!
  account: AccountType!
  name: String!
  altText: String!
  url: String!
  externalId: String!
  mimeType: String!
  size: BigInt
  source: String!

  """
  Imgur URL of the media for Imgur link posts
  """
  imgurUrl: String!

  """
  The URL of the media on a host site
  """
  hostedUrl: String!
  createdBy: AccountMember
  dateCreated: DateTime!
  dateUpdated: DateTime!
  coverImage: CoverImageType
  labels: [MediaLabelType!]!
  isImage: Boolean
  isVideo: Boolean
  isGif: Boolean
  thumbnailUrl: String
  humanReadableSize: String
  duration: Int
  scheduledPosts: Int
  submittedPosts: Int
  scheduledTweets: Int
  submittedTweets: Int
  scheduledThreadsPosts: Int
  submittedThreadsPosts: Int
  scheduledInstagramPosts: Int
  submittedInstagramPosts: Int
  scheduledFacebookPosts: Int
  submittedFacebookPosts: Int
  scheduledTikTokPosts: Int
  submittedTikTokPosts: Int
  scheduledLinkedInPosts: Int
  submittedLinkedInPosts: Int
  scheduledYouTubePosts: Int
  submittedYouTubePosts: Int
  scheduledPinterestPosts: Int
  submittedPinterestPosts: Int
  scheduledBlueskyPosts: Int
  submittedBlueskyPosts: Int
  scheduledTumblrPosts: Int
  submittedTumblrPosts: Int
  scheduledMastodonPosts: Int
  submittedMastodonPosts: Int
}

type MetricsAggregatesType {
  metrics: [MetricType]
}

type MetricsDataPointType {
  isoYear: Int
  isoWeek: Int
  date: DateTime
  metrics: [MetricType]
}

type MetricType {
  metric: String
  value: Float
  aggregation: String
}

type MinimalSocialAccountType {
  id: ID!
  username: String!
  platform: SocialaccountsSocialAccountPlatformChoices!
  avatarUrl: String
  formattedUsername: String
}

type NGram {
  n: Int
  phrases: [NGramPhrase]
}

type NGramPhrase {
  phrase: String
  frequency: Int
}

input PinterestPostSubmissionInputType {
  id: ID
  postAt: DateTime!
}

type PinterestPostSubmissionType implements SocialSubmissionInterface {
  id: ID
  postAt: DateTime
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  globalId: ID
  target: String
  platform: String
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  removeAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  publishingStatus: PublishingStatusType
}

type PinterestPostType implements SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  publishingStatus: PublishingStatusType
  link: String!
  title: String!
  description: String!

  """
  Dominant pin color (hex).
  """
  dominantColor: String!

  """
  Private note for the Pin.
  """
  note: String!

  """
  The board to which the Pin belongs.
  """
  boardId: String!

  """
  The board section to which the Pin belongs.
  """
  boardSectionId: String!
  gallery: GalleryType!
  submissions: [PinterestPostSubmissionType]
  dateUpdated: DateTime
  createdHow: String
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
  pinType: String
}

type PlanType {
  code: String!
  label: String!

  """
  Whether this plan is visible to end-users or not
  """
  visible: Boolean!

  """
  Whether this plan is considered an enterprise plan or not
  """
  isEnterprise: Boolean!
  description: String!
  monthlyPrice: Float!
  annualPrice: Float!
  stripeMonthlyId: String!
  stripeAnnualId: String!
  trialPeriodDays: Int

  """
  Whether this plan supports social media platforms beyond Reddit or not
  """
  supportsMultipleSocialPlatforms: Boolean!

  """
  The number of monthly social media posts (other than Tweets) that this account is allowed to submit
  """
  allowedMonthlyPosts: Int!

  """
  The number of monthly social media posts that accounts that do not support
  multiple social platforms can schedule per month from new non-Twitter
  platforms, such as Instagram or other new platforms.
  """
  allowedMonthlyNewPlatformPosts: Int!

  """
  The number of monthly Tweets the account is allowed to schedule
  """
  allowedMonthlyTweets: Int!

  """
  The number of monthly DMs this account is allowed to automate
  """
  allowedMonthlyDms: Int!

  """
  The number of Reddit accounts the account is allowed to connect
  """
  allowedRedditAccounts: Int!
  allowedContentStorage: BigInt

  """
  Whether this plan supports Fresh Links or not
  """
  canUseFreshLinks: Boolean!

  """
  Whether this plan supports multiple users per account
  """
  hasMultiUser: Boolean!

  """
  Whether this plan supports accessing the Client Manager
  """
  hasClientManager: Boolean!
  hasPremiumSupport: Boolean!
  hasApiAccess: Boolean!

  """
  Whether this plan supports auto-retweets or not
  """
  canUseAutoRetweet: Boolean!
  aiAssistantAccess: String
  paypalMonthlyId: String
  paypalAnnualId: String
  humanReadableAllowedContentStorage: String
}

input PollInputType {
  id: ID
  choices: GenericScalar!
  durationMinutes: Int!
}

type PollType {
  id: ID!
  choices: GenericScalar
  durationMinutes: Int!
  dateCreated: DateTime!
  dateUpdated: DateTime!
}

type PostAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  startOfWeek: DateTime
  date: DateTime
  totalPosts: Int
  totalComments: Int
  totalUpvotes: Int
}

type PostAnalyticsType {
  totalPosts: Int
  totalUpvotes: Int
  totalComments: Int
  avgUpvotes: Float
  avgComments: Float
  firstSubmitted: DateTime
  lastSubmitted: DateTime
  topSubmissions: [TopSubmissionType]
  topSubreddits: [TopSubredditType]
  topLinks: [TopLinkType]
  topSites: [TopSiteType]
  dataPoints: [PostAnalyticsDataPointType]
  postsByAccount: [AccountAggregates]
  postsBySubreddit: [SubredditAggregates]
  postsByCampaign: [CampaignAggregates]
}

"""
An enumeration.
"""
enum PostsDefaultPostSettingsPostTypeChoices {
  """
  Post
  """
  POST

  """
  Link
  """
  LINK

  """
  Image
  """
  IMAGE

  """
  Poll
  """
  POLL
}

"""
An enumeration.
"""
enum PostsImportGroupStatusChoices {
  """
  Pending
  """
  PENDING

  """
  Success
  """
  SUCCESS

  """
  Failed
  """
  FAILED
}

type PostsPaginatedList {
  total: Int
  objects: [RedditPostType]
}

"""
An enumeration.
"""
enum PostsRedditPostPublishingStatusChoices {
  """
  Draft
  """
  DRAFT

  """
  Ready to Publish
  """
  READY_TO_PUBLISH
}

"""
An enumeration.
"""
enum PostsRedditPostSubmissionPublishingMethodChoices {
  """
  Manual
  """
  MANUAL

  """
  Automatic
  """
  AUTOMATIC
}

type PostTemplatePaginatedList {
  total: Int
  objects: [CampaignType]
}

type PreviousTitleType {
  title: String
  count: Int
}

"""
An enumeration.
"""
enum PrivacyLevel {
  SELF_ONLY
  MUTUAL_FOLLOW_FRIENDS
  PUBLIC_TO_EVERYONE
  FOLLOWER_OF_CREATOR
}

"""
An enumeration.
"""
enum PrivacyStatus {
  PRIVATE
  PUBLIC
  UNLISTED
}

type PublicClientConnectLinkType {
  isActive: Boolean!

  """
  Token duration in days. Use 0 for 'never expires'.
  """
  expirationDays: Int!
  token: String!
  expires: DateTime
  url: String
  inviterName: String
  inviterEmail: String
  isValid: Boolean
  isExpired: Boolean
  socialAccounts: [MinimalSocialAccountType]
}

type PublicSecureConnectLinkType {
  token: String!
  expires: DateTime!
  status: UsersSecureConnectLinkStatusChoices!
  platform: UsersSecureConnectLinkPlatformChoices!
  url: String
  inviterName: String
  inviterEmail: String
  isValid: Boolean
}

"""
An enumeration.
"""
enum PublishingMethodType {
  MANUAL
  AUTOMATIC
}

"""
An enumeration.
"""
enum PublishingStatusType {
  DRAFT
  READY_TO_PUBLISH
}

type RedditorAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  startOfWeek: DateTime
  date: DateTime
  linkKarma: Int
  commentKarma: Int
  awardeeKarma: Int
  awarderKarma: Int
  totalKarma: Int
  followers: Int
  score: Int
}

type RedditorAnalyticsType {
  dataPoints: [RedditorAnalyticsDataPointType]
}

type RedditorScoreDetailsType {
  linkKarma: Int
  commentKarma: Int
  accountAge: Int
  hasVerifiedEmail: Int
  removedPosts: Int
}

type RedditPostSubmissionType {
  id: ID!
  post: RedditPostType!

  """
  How this submission is going to be published.
  """
  publishingMethod: PostsRedditPostSubmissionPublishingMethodChoices!
  subreddit: String!

  """
  The Reddit username to submit the post as. Only supported on crossposts
  """
  redditUsername: String!

  """
  Title override for the subreddit submission
  """
  title: String!

  """
  Link override, typically only used with Fresh Links
  """
  link: String!

  """
  Comment override for the subreddit submission
  """
  comment: String!

  """
  Indicates the submission should override the post comment, either by
  submitting no comment or submitting a different comment
  """
  overrideComment: Boolean!

  """
  Immediately crosspost this submission to the user's profile
  """
  profileCrosspost: Boolean!
  crosspostFrom: RedditPostSubmissionType
  flairId: String!
  postAt: DateTime!

  """
  The number of times we have tried submitting this post to the target
  """
  tries: Int!

  """
  The date and time the submission should be removed
  """
  removeAt: DateTime

  """
  The number of hours or days after the post should be removed
  """
  removeAtAmount: Int
  removeAtUnit: String

  """
  The karma threshold required to remove the submission from Reddit. Only posts with karma lower than this will be removed.
  """
  removeMinUpvotes: Int

  """
  The date the post was either submitted or failed to submit
  """
  dateSubmitted: DateTime
  result: SubmissionResultType
  error: SubmissionErrorType
  submissionAttempts: [SubmissionAttemptType!]!
  globalId: ID
  crosspostFromId: String
  isReadyForImgurUpload: Boolean
  platform: String
  postId: ID
  preview: String
  socialAccount: SocialAccountType
}

type RedditPostType {
  id: ID!

  """
  The user who scheduled the post
  """
  user: AccountMember

  """
  The Reddit username to submit the post as
  """
  redditUsername: String!

  """
  The social account to submit the post as
  """
  socialAccount: SocialAccountType!
  title: String!
  link: String!
  content: String!
  comment: String!

  """
  The ID of the Imgur image
  """
  imageId: String!
  media: MediaType
  gallery: GalleryType
  campaign: CampaignType
  sendRepliesToInbox: Boolean!
  nsfw: Boolean!
  spoiler: Boolean!
  publishingStatus: PostsRedditPostPublishingStatusChoices!
  pollChoices: [String]

  """
  The number of hours the poll should be open for
  """
  pollDuration: Int
  dateCreated: DateTime!
  dateUpdated: DateTime!

  """
  The date and time the submission was soft-deleted
  """
  dateDeleted: DateTime
  submissions: [RedditPostSubmissionType!]!
  campaignId: String
  thumbnailUrl: String

  """
  Deprecated, do not use
  """
  imageUploadLocation: String
  submissionCount: Int
  platform: String
  preview: String
}

type RedditRedditorType {
  id: String
  name: String
  iconImg: String
  commentKarma: Int
  linkKarma: Int
  followers: Int
  createdUtc: Int
  createdAt: DateTime
  title: String
  publicDescription: String
  over18: Boolean
}

"""
An enumeration.
"""
enum RedditSubmissionPostTypeChoices {
  """
  Self-post
  """
  SELFPOST

  """
  Link-post
  """
  LINK
}

type RedditSubmissionType {
  id: String
  subreddit: String
  author: RedditRedditorType
  title: String
  url: String
  thumbnail: String
  userUpvoted: Boolean
  createdUtc: Int
  createdAt: DateTime
  score: Int
  numComments: Int
  over18: Boolean
  permalink: String
  removedByCategory: String
}

"""
Aka RedditorType
"""
type RedditUserType {
  id: ID!
  username: String!

  """
  Whether the account can be used to schedule posts and send DMs
  """
  enabled: Boolean!

  """
  Whether the account can be used to log into Postpone
  """
  canLogin: Boolean!

  """
  Indicates that Postpone has a successful connection to this Reddit account
  """
  accountConnected: Boolean!

  """
  Indicates whether Postpone should sync this account's subscribed subreddits with the Subreddit Manager
  """
  syncSubscribedSubreddits: Boolean!

  """
  The score (roughly 0-10) indicating the likelihood submissions will succeed
  """
  score: Int!
  scoreDetails: RedditorScoreDetailsType
  countryCode: String
  proxyType: String
  accessToken: String
  refreshToken: String
  name: String
  hasDmsEnabled: Boolean
  hasHistoryEnabled: Boolean
  hasEditEnabled: Boolean
  hasVoteEnabled: Boolean
  hasMysubredditsEnabled: Boolean
  hasAccountScopeEnabled: Boolean
  hasModconfigScopeEnabled: Boolean
  hasModpostsScopeEnabled: Boolean
  hasVerifiedEmail: Boolean
  socialAuthId: ID
  linkKarma: Int
  commentKarma: Int
  followers: Int
  inboxCount: Int
  iconImg: String
  dateCreated: DateTime
  removedSubmissionsPercentage: Float
  formattedUsername: String
  provider: String
  uid: String
  platform: String
  avatarUrl: String
  profileUrl: String
}

type RemoveModAlert {
  success: Boolean
}

"""
An enumeration.
"""
enum ReplySettings {
  EVERYONE
  MENTIONED_USERS
  FOLLOWING
}

type RetryRedditPost {
  success: Boolean
  errors: [String]
}

type RowValidationErrorType {
  row: Int
  errors: [ValidationErrorType]
}

enum SafetyFilter {
  ALL
  SFW
  NSFW
}

type ScheduleBlueskyPost {
  success: Boolean
  errors: [ValidationErrorType]
  post: BlueskyPostType
}

input ScheduleBlueskyPostInput {
  id: ID
  username: String!
  allowRepliesFrom: AllowRepliesFrom
  postAt: DateTime!
  thread: [BlueskyPostSubmissionInputType]!
  publishingStatus: PublishingStatusType = READY_TO_PUBLISH
}

type ScheduledPostAnalyticsType {
  totalScheduled: Int
  firstScheduled: DateTime
  nextScheduled: DateTime
  lastScheduled: DateTime
  lastCreated: RedditPostType
}

type ScheduleFacebookPost {
  success: Boolean
  errors: [ValidationErrorType]
  post: FacebookPostType
}

input ScheduleFacebookPostInput {
  id: ID
  username: String!
  text: String
  gallery: GalleryInput

  """
  Name of a file in the account's Content Library. Postpone will use the first matching file. Case-insensitive.
  """
  mediaName: String

  """
  URL of a file to be used in the post. The file will be added to your Content Library.
  """
  mediaUrl: String
  submissions: [FacebookPostSubmissionInputType]!
  publishingStatus: PublishingStatusType = READY_TO_PUBLISH
}

type ScheduleInstagramPost {
  success: Boolean
  errors: [ValidationErrorType]
  post: InstagramPostType
}

input ScheduleInstagramPostInput {
  id: ID
  username: String!
  caption: String
  firstComment: String
  collaborators: [String]
  gallery: GalleryInput

  """
  Name of a file in the account's Content Library. Postpone will use the first matching file. Case-insensitive.
  """
  mediaName: String

  """
  URL of a file to be used in the post. The file will be added to your Content Library.
  """
  mediaUrl: String
  submissions: [InstagramPostSubmissionInputType]!
  publishingStatus: PublishingStatusType = READY_TO_PUBLISH
}

type ScheduleLinkedInPost {
  success: Boolean
  errors: [ValidationErrorType]
  post: LinkedInPostType
}

input ScheduleLinkedInPostInput {
  id: ID
  username: String!
  text: String!
  link: String
  visibility: Visibility!
  gallery: GalleryInput

  """
  Name of a file in the account's Content Library. Postpone will use the first matching file. Case-insensitive.
  """
  mediaName: String

  """
  URL of a file to be used in the post. The file will be added to your Content Library.
  """
  mediaUrl: String
  submissions: [LinkedInPostSubmissionInputType]!
  publishingStatus: PublishingStatusType = READY_TO_PUBLISH
}

type ScheduleMastodonPost {
  success: Boolean
  errors: [ValidationErrorType]
  post: MastodonPostType
}

input ScheduleMastodonPostInput {
  id: ID
  username: String!
  postAt: DateTime!
  thread: [MastodonPostSubmissionInputType]!
  publishingStatus: PublishingStatusType = READY_TO_PUBLISH
}

type SchedulePinterestPost {
  success: Boolean
  errors: [ValidationErrorType]
  post: PinterestPostType
}

input SchedulePinterestPostInput {
  id: ID
  username: String!
  link: String
  title: String!
  description: String
  dominantColor: String
  note: String
  boardId: String!
  boardSectionId: String
  gallery: GalleryInput

  """
  Name of a file in the account's Content Library. Postpone will use the first matching file. Case-insensitive.
  """
  mediaName: String

  """
  URL of a file to be used in the post. The file will be added to your Content Library.
  """
  mediaUrl: String
  submissions: [PinterestPostSubmissionInputType]!
  publishingStatus: PublishingStatusType = READY_TO_PUBLISH
}

type ScheduleThreadsPost {
  success: Boolean
  errors: [ValidationErrorType]
  post: ThreadsPostType
}

input ScheduleThreadsPostInput {
  id: ID
  username: String!
  postAt: DateTime!
  thread: [ThreadsPostSubmissionInputType]!
  replySettings: ReplySettings
  publishingStatus: PublishingStatusType = READY_TO_PUBLISH
}

type ScheduleTikTokPost {
  success: Boolean
  errors: [ValidationErrorType]
  post: TikTokPostType
}

input ScheduleTikTokPostInput {
  id: ID
  username: String!
  caption: String
  description: String
  gallery: GalleryInput

  """
  Name of a file in the account's Content Library. Postpone will use the first matching file. Case-insensitive.
  """
  mediaName: String

  """
  URL of a file to be used in the post. The file will be added to your Content Library.
  """
  mediaUrl: String
  privacyLevel: PrivacyLevel!
  allowUsersToDuet: Boolean!
  allowUsersToComment: Boolean!
  allowUsersToStitch: Boolean!
  autoAddMusic: Boolean
  isBrandContent: Boolean!
  isPaidPartnership: Boolean!
  submissions: [TikTokPostSubmissionInputType]!
  publishingStatus: PublishingStatusType = READY_TO_PUBLISH
}

type ScheduleTumblrPost {
  success: Boolean
  errors: [ValidationErrorType]
  post: TumblrPostType
}

input ScheduleTumblrPostInput {
  id: ID
  username: String!

  """
  The post content in NPF
  """
  content: JSONString!

  """
  The post layout in NPF
  """
  layout: JSONString!
  tags: [String]
  sourceUrl: String
  communityLabel: CommunityLabel!
  submissions: [TumblrPostSubmissionInputType]!
  publishingStatus: PublishingStatusType = READY_TO_PUBLISH
}

type ScheduleTweet {
  success: Boolean
  errors: [ValidationErrorType]
  post: TwitterPostType
}

input ScheduleTweetInput {
  id: ID
  username: String!
  postAt: DateTime!
  thread: [TweetInputType]!
  forSuperFollowersOnly: Boolean
  replySettings: ReplySettings
  publishingStatus: PublishingStatusType = READY_TO_PUBLISH
}

type ScheduleYouTubePost {
  success: Boolean
  errors: [ValidationErrorType]
  post: YouTubePostType
}

input ScheduleYouTubePostInput {
  id: ID
  username: String!
  title: String!
  description: String
  tags: [String]
  madeForKids: Boolean!
  gallery: GalleryInput

  """
  Name of a file in the account's Content Library. Postpone will use the first matching file. Case-insensitive.
  """
  mediaName: String

  """
  URL of a file to be used in the post. The file will be added to your Content Library.
  """
  mediaUrl: String
  privacyStatus: PrivacyStatus!
  submissions: [YouTubePostSubmissionInputType]!
  publishingStatus: PublishingStatusType = READY_TO_PUBLISH
}

type SecureConnectLinkType {
  token: String!
  expires: DateTime!
  status: UsersSecureConnectLinkStatusChoices!
  platform: UsersSecureConnectLinkPlatformChoices!
  id: ID!

  """
  The Redditor who used this link to connect their account
  """
  redditor: RedditUserType

  """
  The social account who used this link to connect their account
  """
  socialAccount: SocialAccountType
  dateCreated: DateTime!
  url: String
  isValid: Boolean
}

type SetDefaultPostSettingsFields {
  success: Boolean
  validationErrors: [ValidationErrorType]
}

type SetFrequencyWarningsEnabled {
  success: Boolean
  errors: [String]
}

type SocialAccountAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  startOfWeek: DateTime
  date: DateTime
  followers: Int
  submissions: Int
}

type SocialAccountAnalyticsType {
  dataPoints: [SocialAccountAnalyticsDataPointType]
}

type SocialAccountCapabilitiesType {
  viewAnalytics: Boolean
  listMessages: Boolean
  createMessages: Boolean
  listComments: Boolean
  createComments: Boolean
}

input SocialAccountInputType {
  username: String!
  platform: String!
}

"""
An enumeration.
"""
enum SocialaccountsSocialAccountPlatformChoices {
  """
  Reddit
  """
  REDDIT

  """
  Twitter
  """
  TWITTER

  """
  Threads
  """
  THREADS

  """
  Instagram
  """
  INSTAGRAM

  """
  Facebook
  """
  FACEBOOK

  """
  Tiktok
  """
  TIKTOK

  """
  Linkedin
  """
  LINKEDIN

  """
  Youtube
  """
  YOUTUBE

  """
  Pinterest
  """
  PINTEREST

  """
  Bluesky
  """
  BLUESKY

  """
  Tumblr
  """
  TUMBLR

  """
  Mastodon
  """
  MASTODON
}

type SocialAccountType {
  id: ID!
  username: String!
  platform: SocialaccountsSocialAccountPlatformChoices!
  avatarUrl: String

  """
  The ID of the account on the platform
  """
  platformId: String!
  name: String!

  """
  The domain of the platform instance. Eg mastodon.social, techhub.social, etc.
  """
  platformDomain: String!
  followers: Int!
  description: String!

  """
  Date the account was created on the platform
  """
  dateCreated: DateTime
  verified: Boolean!
  platformFeatures: GenericScalar
  profile: JSONString

  """
  Whether the account can be used on Postpone
  """
  isEnabled: Boolean!

  """
  Whether the account can be used to log into Postpone
  """
  canLogin: Boolean!

  """
  Indicates that Postpone has a valid connection to the account
  """
  isConnected: Boolean!
  schedule: GenericScalar
  profileUrl: String
  formattedUsername: String
  postSettings: GenericScalar
  capabilities: SocialAccountCapabilitiesType
}

"""
One of the social platforms Postpone supports.
"""
enum SocialPlatform {
  REDDIT
  INSTAGRAM
  TWITTER
  THREADS
  FACEBOOK
  TIKTOK
  LINKEDIN
  YOUTUBE
  PINTEREST
  BLUESKY
  TUMBLR
  MASTODON
}

interface SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  dateUpdated: DateTime
  createdHow: String
  publishingStatus: PublishingStatusType
  submissions: [SocialSubmissionInterface]
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
}

type SocialSubmissionErrorType {
  id: ID!
  errorCode: String!
  message: String!
  suggestedFix: String!
  traceback: String!
  dateFailed: DateTime!
  dateUpdated: DateTime!

  """
  When the error was acknowledged by the account owner
  """
  dateAcknowledged: DateTime
}

interface SocialSubmissionInterface {
  id: ID
  globalId: ID
  target: String
  platform: String
  postAt: DateTime
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  removeAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  publishingStatus: PublishingStatusType
}

type SocialSubmissionResultType {
  id: ID!
  accountUsername: String!

  """
  The ID of the submission on the platform
  """
  externalSubmissionId: String!
  url: String!
  dateSubmitted: DateTime!

  """
  The number of likes, upvotes, or favorites the submission received
  """
  likes: Int!

  """
  The number of views the submission received
  """
  views: Int!

  """
  The number of comments the submission received
  """
  comments: Int!
  removedBy: String!
  removedByCategory: String!
  removalReason: String!
  status: String
}

enum SortFieldType {
  DATE
  LIKES
  COMMENTS
}

type SubmissionAttemptType {
  id: ID!
  dateAttempted: DateTime!
  authorUsername: String!
  subreddit: String!
  title: String!
  link: String!
  success: Boolean!
  redditSubmissionId: String!
  errorCode: String!
  errorMessage: String!
  url: String
}

type SubmissionErrorType {
  id: ID!
  errorCode: String!
  message: String!
  dateFailed: DateTime!

  """
  When the error was acknowledged by the account owner
  """
  dateAcknowledged: DateTime
  suggestedFix: String
}

input SubmissionInput {
  id: String

  """
  Internal ID to map response validation errors to specific submissions and link to a parent submission in crosspost_from
  """
  validationId: String
  subreddit: String!
  redditUsername: String
  postAt: DateTime!
  title: String
  comment: String
  overrideComment: Boolean
  profileCrosspost: Boolean

  """
  The validation_id of the parent submission to crosspost from
  """
  crosspostFrom: String
  flairId: String

  """
  Deprecated, use remove_at_amount and remove_at_unit instead
  """
  removeAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinUpvotes: Int
  publishingMethod: PublishingMethodType
}

type SubmissionResultType {
  id: ID!
  authorUsername: String!

  """
  The Reddit ID of the submission
  """
  submissionId: String!
  dateCreated: DateTime!
  upvotes: Int!
  comments: Int!
  removedByCategory: String!
  url: String
  isRemoved: Boolean
  isRemovedByAuthor: Boolean
  likes: Int
  dateSubmitted: DateTime
}

type SubmissionsPaginatedList {
  total: Int
  objects: [RedditPostSubmissionType]
}

enum SubmissionType {
  ALL
  SCHEDULED
  SUBMITTED
  FAILED
  ATTEMPTED
}

"""
Submits a Reddit post to Reddit immediately.
"""
type SubmitRedditPost {
  success: Boolean
  errors: [String]
}

"""
Submits an individual post submission to Reddit immediately.
"""
type SubmitRedditSubmission {
  success: Boolean
  errors: [String]
  submissionError: SubmissionErrorType
}

type SubredditAggregates {
  subreddit: String
  totalPosts: Int
  totalUpvotes: Int
  totalComments: Int
  avgUpvotes: Float
  avgComments: Float
}

type SubredditFlairType {
  linkFlairText: String
  avgUpvotes: Float
  avgComments: Float
  totalPosts: Int
  totalUpvotes: Int
  totalComments: Int
}

type SubredditLabelType {
  id: ID!
  text: String!
  color: String!
  subredditCount: Int
}

"""
An enumeration.
"""
enum SubredditManagerPermissionType {
  FULL
  NONE
}

type SubredditModeratorType {
  name: String
  isBot: Boolean
  isRepostBot: Boolean
}

type SubredditPostRequirementsType {
  description: String
}

type SubredditRuleType {
  shortName: String
  description: String
  descriptionHtml: String
  kind: String
  violationReason: String
  priority: Int
}

type SubredditSiteType {
  site: String
  avgUpvotes: Float
  avgComments: Float
  totalPosts: Int
  totalUpvotes: Int
  totalComments: Int
}

"""
An enumeration.
"""
enum SubredditsUserSubredditFrequencyWarningIntervalUnitChoices {
  """
  Hour
  """
  HOUR

  """
  Day
  """
  DAY
}

type SubredditTopPostsType {
  id: String
  subreddit: String
  posts: [HourlyPostType]
  avgUpvotes: Float
  recommendations: [HourlyPostType]
  ngrams: [NGram]
  bestTimeOverall: HourlyPostType
  bestTimeToday: HourlyPostType
  bestTimeTomorrow: HourlyPostType
  topSites: [SubredditSiteType]
  topFlair: [SubredditFlairType]
}

type SubredditType {
  displayName: String
  title: String
  iconImg: String
  communityIcon: String
  publicDescription: String
  subscribers: Int
  accountsActive: Int
  activeUserCount: Int
  createdUtc: Int
  canAssignLinkFlair: Boolean
  over18: Boolean
  nsfw: Boolean
  isCrosspostableSubreddit: Boolean
  verificationRequired: Boolean
  submissionType: String
  subredditType: String
  userSubreddit: UserSubredditType
  linkFlair: [FlairType]
  allowGalleries: Boolean
  allowPolls: Boolean
  allowVideos: Boolean
  allowImages: Boolean
}

type ThreadsAnalyticsType {
  totalPosts: Int
  avgLikes: Float
  totalLikes: Int
  totalReplies: Int
  totalViews: Int
  totalReposts: Int
  totalQuotes: Int
  topSubmissions: [TopThreadsSubmissionType]
  dataPoints: [ThreadsSubmissionAnalyticsDataPointType]
}

input ThreadsPostSubmissionInputType {
  id: ID
  text: String!
  gallery: GalleryInput
  gifUrl: String

  """
  Name of a file in the account's Content Library. Postpone will use the first matching file. Case-insensitive.
  """
  mediaName: String

  """
  URL of a file to be used in the post. The file will be added to your Content Library.
  """
  mediaUrl: String
  order: Int!
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountInputType
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  final: Boolean
}

type ThreadsPostSubmissionType implements SocialSubmissionInterface {
  id: ID
  postAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  text: String!
  gallery: GalleryType

  """
  URL of the GIF to be submitted.
  """
  gifUrl: String!
  order: Int!
  final: Boolean!
  globalId: ID
  target: String
  platform: String
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  removeAt: DateTime
  publishingStatus: PublishingStatusType
}

type ThreadsPostType implements SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  publishingStatus: PublishingStatusType
  replySettings: ThreadsThreadsPostReplySettingsChoices!
  submissions: [ThreadsPostSubmissionType]
  dateUpdated: DateTime
  createdHow: String
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
}

type ThreadsSubmissionAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  date: DateTime
  totalPosts: Int
  avgLikes: Float
  totalLikes: Int
  totalReplies: Int
  totalViews: Int
  totalReposts: Int
  totalQuotes: Int
}

"""
An enumeration.
"""
enum ThreadsThreadsPostReplySettingsChoices {
  """
  Everyone
  """
  EVERYONE

  """
  Mentioned users
  """
  MENTIONED_USERS

  """
  Following
  """
  FOLLOWING
}

type TikTokAnalyticsType {
  totalPosts: Int
  totalLikes: Int
  totalComments: Int
  totalShares: Int
  totalImpressions: Int
  avgLikes: Float
  topSubmissions: [TopTikTokPostSubmissionType]
  dataPoints: [TikTokPostSubmissionAnalyticsDataPointType]
}

type TikTokPostSubmissionAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  date: DateTime
  totalPosts: Int
  totalLikes: Int
  avgLikes: Float
  totalComments: Int
  totalShares: Int
  totalImpressions: Int
}

input TikTokPostSubmissionInputType {
  id: ID
  postAt: DateTime!
}

type TikTokPostSubmissionType implements SocialSubmissionInterface {
  id: ID
  postAt: DateTime
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  globalId: ID
  target: String
  platform: String
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  removeAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  publishingStatus: PublishingStatusType
}

type TikTokPostType implements SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  publishingStatus: PublishingStatusType
  caption: String!
  description: String!
  gallery: GalleryType!
  privacyLevel: TiktokTikTokPostPrivacyLevelChoices!
  allowUsersToDuet: Boolean!
  allowUsersToComment: Boolean!
  allowUsersToStitch: Boolean!

  """
  Whether TikTok should automatically add music to the video
  """
  autoAddMusic: Boolean!

  """
  The video is promoting the creator's own business
  """
  isBrandContent: Boolean!

  """
  The video is in paid partnership for promoting third-party business
  """
  isPaidPartnership: Boolean!
  submissions: [TikTokPostSubmissionType]
  dateUpdated: DateTime
  createdHow: String
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
}

"""
An enumeration.
"""
enum TiktokTikTokPostPrivacyLevelChoices {
  """
  Private
  """
  SELF_ONLY

  """
  Friends
  """
  MUTUAL_FOLLOW_FRIENDS

  """
  Public
  """
  PUBLIC_TO_EVERYONE

  """
  Followers
  """
  FOLLOWER_OF_CREATOR
}

"""
The `Time` scalar type represents a Time value as
specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Time

type TimezoneType {
  value: String
  name: String
}

type TopBlueskyPostSubmissionType {
  platformId: String!
  dateSubmitted: DateTime!
  socialAccount: SocialAccountType!
  likes: Int!
  replies: Int!
  reposts: Int!
  quotes: Int!
  url: String
  text: String
}

type TopFacebookSubmissionType {
  platformId: String!
  dateSubmitted: DateTime!
  socialAccount: SocialAccountType!
  message: String
  thumbnailUrl: String!

  """
  The number of likes on your post.
  """
  likes: BigInt!

  """
  The number of comments on your post.
  """
  comments: BigInt!

  """
  The number of unique people who engaged in certain ways with your Page post,
  for example by commenting on, liking, sharing, or clicking upon particular
  elements of the post.
  """
  engagedUsers: BigInt!

  """
  The number of people who liked your Page and clicked anywhere in your posts.
  """
  engagedFan: BigInt!

  """
  The number of clicks anywhere in your post on News Feed from the user that matched the audience targeting on it.
  """
  clicks: BigInt!

  """
  The number of people who matched the audience targeting that clicked anywhere in your post on News Feed.
  """
  clicksUnique: BigInt!

  """
  The number of times your Page's post entered a person's screen.
  """
  impressions: BigInt!

  """
  The number of people who had your Page's post enter their screen.
  """
  impressionsUnique: BigInt!

  """
  Total number of times your video was viewed for 3+ seconds.
  """
  videoViews: BigInt!
  url: String
}

type TopInstagramSubmissionType {
  platformId: String!
  dateSubmitted: DateTime!
  socialAccount: SocialAccountType!
  mediaProductType: String!
  mediaType: String!
  mediaUrl: String!
  thumbnailUrl: String!

  """
  The number of likes on your post.
  """
  likes: BigInt!

  """
  The number of comments on your post.
  """
  comments: BigInt!

  """
  The number of accounts that started following you.
  """
  follows: BigInt!

  """
  The number of actions people take when they visit your profile after engaging with your post.
  """
  profileActivity: BigInt!

  """
  The number of times your profile was visited.
  """
  profileVisits: BigInt!

  """
  The number of shares of your post.
  """
  shares: BigInt!

  """
  The number of likes, saves, comments and shares on your post minus the number of unlikes, unsaves and deleted comments.
  """
  totalInteractions: BigInt!

  """
  Total number of unique Instagram accounts that have seen the IG Media object.
  """
  reach: BigInt!

  """
  Total number of times the IG Media object has been seen.
  """
  impressions: BigInt!
  caption: String
  url: String
  carouselAlbumEngagement: Int
  carouselAlbumImpressions: Int
  carouselAlbumReach: Int
}

type TopLinkedInPostSubmissionType {
  platformId: String!
  dateSubmitted: DateTime!
  socialAccount: SocialAccountType!

  """
  The number of likes on your post.
  """
  likes: BigInt!

  """
  The number of comments on your post.
  """
  comments: BigInt!

  """
  The number of impressions of your post.
  """
  impressions: BigInt!
  url: String
  text: String
}

type TopLinkType {
  link: String
  avgUpvotes: Float
  avgComments: Float
  totalPosts: Int
  totalUpvotes: Int
  totalComments: Int
}

type TopMastodonPostSubmissionType {
  platformId: String!
  dateSubmitted: DateTime!
  socialAccount: SocialAccountType!
  likes: Int!
  replies: Int!
  reposts: Int!
  url: String
  text: String
}

type TopSiteType {
  site: String
  avgUpvotes: Float
  avgComments: Float
  totalPosts: Int
  totalUpvotes: Int
  totalComments: Int
}

type TopSubmissionType {
  id: ID
  subreddit: String
  title: String
  postAt: DateTime
  post: _PostType
  result: _ResultType
}

type TopSubredditType {
  subreddit: String
  avgUpvotes: Float
  avgComments: Float
  avgRemoved: Float
  totalPosts: Int
  totalUpvotes: Int
  totalComments: Int
  totalRemoved: Int
}

type TopThreadsSubmissionType {
  platformId: String!
  dateSubmitted: DateTime!
  socialAccount: SocialAccountType!
  text: String
  mediaProductType: String!
  mediaType: String!
  mediaUrl: String!
  thumbnailUrl: String!

  """
  The number of likes on your post.
  """
  likes: BigInt!

  """
  The number of replies to your post.
  """
  replies: BigInt!

  """
  The number of times the post was viewed.
  """
  views: BigInt!

  """
  The number of times the post was reposted.
  """
  reposts: BigInt!

  """
  The number of times the post was quoted.
  """
  quotes: BigInt!
  url: String
}

type TopTikTokPostSubmissionType {
  platformId: String!
  dateSubmitted: DateTime!
  socialAccount: SocialAccountType!

  """
  The number of likes on your post.
  """
  likes: BigInt!

  """
  The number of comments on your post.
  """
  comments: BigInt!

  """
  The number of shares of your post.
  """
  shares: BigInt!

  """
  The number of impressions of your post.
  """
  impressions: BigInt!
  url: String
  caption: String
}

type TopTumblrPostSubmissionType {
  platformId: String!
  dateSubmitted: DateTime!
  socialAccount: SocialAccountType!

  """
  A combination of likes, replies, and reposts.
  """
  notes: Int!
  url: String
  text: String
}

type TopTweetType {
  platformId: ID
  socialAccount: SocialAccountType
  title: String
  dateSubmitted: DateTime
  posts: Int
  likes: Int
  replies: Int
  retweets: Int
  impressions: Int
  quoteTweets: Int
  urlLinkClicks: Int
  userProfileClicks: Int
  url: String
  text: String
}

type TopYouTubePostSubmissionType {
  platformId: String!
  dateSubmitted: DateTime!
  socialAccount: SocialAccountType!
  thumbnailUrl: String!

  """
  The number of likes on your post.
  """
  likes: BigInt!

  """
  The number of dislikes on your post.
  """
  dislikes: BigInt!

  """
  The number of comments on your post.
  """
  comments: BigInt!

  """
  The number of views of your post.
  """
  views: BigInt!

  """
  The number of favorites of your post.
  """
  favorites: BigInt!
  url: String
  title: String
}

type TumblrAnalyticsType {
  totalPosts: Int
  totalNotes: Int
  avgNotes: Float
  topSubmissions: [TopTumblrPostSubmissionType]
  dataPoints: [TumblrPostSubmissionAnalyticsDataPointType]
}

type TumblrPostSubmissionAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  date: DateTime
  totalPosts: Int
  totalNotes: Int
  avgNotes: Float
}

input TumblrPostSubmissionInputType {
  id: ID
  postAt: DateTime!
}

type TumblrPostSubmissionType implements SocialSubmissionInterface {
  id: ID
  postAt: DateTime
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  globalId: ID
  target: String
  platform: String
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  removeAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  publishingStatus: PublishingStatusType
}

type TumblrPostType implements SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  publishingStatus: PublishingStatusType

  """
  The post content in NPF (https://www.tumblr.com/docs/npf)
  """
  content: JSONString!

  """
  The post layout in NPF (https://www.tumblr.com/docs/npf)
  """
  layout: JSONString!
  tags: [String!]!

  """
  A source attribution for the post content.
  """
  sourceUrl: String!

  """
  Media that this post references in the npf_content. Used for cascade deletes.
  """
  gallery: GalleryType
  communityLabel: TumblrTumblrPostCommunityLabelChoices!
  submissions: [TumblrPostSubmissionType]
  dateUpdated: DateTime
  createdHow: String
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
}

"""
An enumeration.
"""
enum TumblrTumblrPostCommunityLabelChoices {
  """
  For everyone
  """
  FOR_EVERYONE

  """
  Mature
  """
  MATURE

  """
  Drugs & alcohol addiction
  """
  DRUGS

  """
  Violence
  """
  VIOLENCE

  """
  Sexual themes
  """
  SEXUAL_THEMES
}

type TweetAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  date: DateTime
  totalPosts: Int
  totalLikes: Int
  totalReplies: Int
  totalRetweets: Int
  totalImpressions: Int
  totalQuoteTweets: Int
  totalUrlLinkClicks: Int
  totalUserProfileClicks: Int
}

input TweetInputType {
  id: ID
  text: String!
  gallery: GalleryInput
  gifUrl: String
  poll: PollInputType

  """
  Name of a file in the account's Content Library. Postpone will use the first matching file. Case-insensitive.
  """
  mediaName: String

  """
  URL of a file to be used in the post. The file will be added to your Content Library.
  """
  mediaUrl: String
  order: Int!
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountInputType
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  final: Boolean
}

type TweetType implements SocialSubmissionInterface {
  id: ID
  postAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  text: String!
  gallery: GalleryType

  """
  URL of the GIF to be submitted.
  """
  gifUrl: String!
  poll: PollType
  order: Int!
  final: Boolean!
  globalId: ID
  target: String
  platform: String
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  removeAt: DateTime
  publishingStatus: PublishingStatusType
}

type TwitterAnalyticsType {
  totalPosts: Int
  totalLikes: Int
  totalReplies: Int
  totalRetweets: Int
  totalImpressions: Int
  totalQuoteTweets: Int
  totalUrlLinkClicks: Int
  totalUserProfileClicks: Int
  avgLikes: Float
  topSubmissions: [TopTweetType]
  dataPoints: [TweetAnalyticsDataPointType]
}

type TwitterPostType implements SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  publishingStatus: PublishingStatusType
  replySettings: TwitterTwitterPostReplySettingsChoices!
  submissions: [TweetType]
  dateUpdated: DateTime
  createdHow: String
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
}

"""
An enumeration.
"""
enum TwitterTwitterPostReplySettingsChoices {
  """
  Everyone
  """
  EVERYONE

  """
  Mentioned users
  """
  MENTIONED_USERS

  """
  Following
  """
  FOLLOWING
}

type UpdateDefaultPostSettings {
  success: Boolean
  errors: [String]
}

type UpdateRedditPostSubmissionPostAt {
  success: Boolean
  errors: [String]
}

"""
An enumeration.
"""
enum UsersSecureConnectLinkPlatformChoices {
  """
  Reddit
  """
  REDDIT

  """
  Instagram
  """
  INSTAGRAM

  """
  Twitter
  """
  TWITTER

  """
  Threads
  """
  THREADS

  """
  Facebook
  """
  FACEBOOK

  """
  TikTok
  """
  TIKTOK

  """
  LinkedIn
  """
  LINKEDIN

  """
  YouTube
  """
  YOUTUBE

  """
  Pinterest
  """
  PINTEREST

  """
  Bluesky
  """
  BLUESKY

  """
  Tumblr
  """
  TUMBLR

  """
  Mastodon
  """
  MASTODON
}

"""
An enumeration.
"""
enum UsersSecureConnectLinkStatusChoices {
  """
  Pending
  """
  PENDING

  """
  Used
  """
  USED

  """
  Expired
  """
  EXPIRED

  """
  Revoked
  """
  REVOKED
}

type UserSubredditType {
  id: ID!
  subreddit: InternalSubredditType
  favorite: Boolean!
  flag: Boolean!
  notes: String!
  schedule: GenericScalar
  verificationStatus: String
  verificationStatuses: GenericScalar
  overrideComment: Boolean!
  defaultComment: String!
  defaultFlairId: String!

  """
  The number of hours or days after the post should be removed
  """
  defaultRemoveAtAmount: Int
  defaultRemoveAtUnit: String

  """
  The karma threshold required to remove the submission from Reddit. Only posts with karma lower than this will be removed.
  """
  defaultRemoveMinUpvotes: Int

  """
  A prefix to add to the title of all posts made by this user in this subreddit
  """
  titlePrefix: String!

  """
  A suffix to add to the title of all posts made by this user in this subreddit
  """
  titleSuffix: String!
  hasFrequencyWarning: Boolean!
  frequencyWarningIntervalAmount: Int!
  frequencyWarningIntervalUnit: SubredditsUserSubredditFrequencyWarningIntervalUnitChoices!
  labels: [SubredditLabelType!]!
  lastScheduledSubmission: RedditPostSubmissionType
  scheduledSubmissions: [RedditPostSubmissionType]
  scheduledPostCount: Int
  submittedPostCount: Int
  firstScheduledPostDate: DateTime
  lastScheduledPostDate: DateTime
  firstSubmittedPostDate: DateTime
  lastSubmittedPostDate: DateTime
}

"""
User type object
"""
type UserType {
  id: ID!
  hashedId: String
  account: AccountType
  username: String!

  """
  The confirmed, in-force email. This is only set if the user goes through the email confirmation process.
  """
  email: String

  """
  An email that is pending confirmation.
  """
  pendingEmail: String!
  fullName: String!
  apiToken: String!
  timezone: String
  weekStart: Int
  registeredAt: DateTime!
  submitsNsfw: Boolean!
  preferences: GenericScalar

  """
  The method the user used to sign up
  """
  signupMethod: String!
  sendEmailNotifications: Boolean!
  sendRedditDmNotifications: Boolean!
  notifyOnSubmissionFailed: Boolean!
  notifyOnEmptyPostQueue: Boolean!
  reportsFrequency: String
  onboardingConnectedRedditAccount: Boolean!
  onboardingScheduledPost: Boolean!
  onboardingAnalyzedSubreddit: Boolean!
  onboardingAddedEmail: Boolean!
  onboardingCreatedCampaign: Boolean!
  onboardingCrossposted: Boolean!
  onboardingViewedPostAnalytics: Boolean!
  onboardingUploadedToContentLibrary: Boolean!
  onboardingUsedSubredditManager: Boolean!
  redditAccounts: [RedditUserType]
  socialAccounts: [SocialAccountType]
  remainingMonthlyPosts: Int
  onboardingComplete: Boolean
  postSettings: DefaultPostSettingsType
  isImpersonating: Boolean
  hasGoogleSso: Boolean
  contentPermission: ContentPermissionType
  inboxPermission: InboxPermissionType
  subredditManagerPermission: SubredditManagerPermissionType
  canAccessAnalytics: Boolean
  canAccessSettingsIpProxies: Boolean
  canAccessSettingsDataExport: Boolean
  canAccessSettingsContentHosts: Boolean
  canAccessSettingsCustomSchedules: Boolean
  canAccessDefaultPostSettings: Boolean
  canManageMembers: Boolean
  canConnectSocialAccounts: Boolean
  canManageAllSocialAccounts: Boolean
  imgurAccountId: Int
  imgurAccountUsername: String
  imgurAccessToken: String
}

type ValidationErrorType {
  code: String
  message: String
  params: GenericScalar
  field: String
}

"""
An enumeration.
"""
enum Visibility {
  PUBLIC
  CONNECTIONS
  LOGGED_IN
}

type YouTubeAnalyticsType {
  totalPosts: Int
  totalLikes: Int
  totalDislikes: Int
  totalComments: Int
  totalViews: Int
  totalFavorites: Int
  avgLikes: Float
  topSubmissions: [TopYouTubePostSubmissionType]
  dataPoints: [YouTubePostSubmissionAnalyticsDataPointType]
}

type YouTubePostSubmissionAnalyticsDataPointType {
  isoYear: Int
  isoWeek: Int
  date: DateTime
  totalPosts: Int
  totalLikes: Int
  totalDislikes: Int
  totalComments: Int
  totalViews: Int
  totalFavorites: Int
  avgLikes: Float
}

input YouTubePostSubmissionInputType {
  id: ID
  postAt: DateTime!
}

type YouTubePostSubmissionType implements SocialSubmissionInterface {
  id: ID
  postAt: DateTime
  result: SocialSubmissionResultType
  error: SocialSubmissionErrorType
  globalId: ID
  target: String
  platform: String
  postId: ID

  """
  Preview of the post
  """
  preview: String

  """
  A URL the post links to
  """
  url: String
  socialAccount: SocialAccountType
  media: MediaType
  isGallery: Boolean
  repostAt: DateTime
  repostAtAmount: Int
  repostAtUnit: String
  repostRepeatDays: Int
  repostFromSocialAccount: SocialAccountType
  removeAt: DateTime
  removeAtAmount: Int
  removeAtUnit: String
  removeMinLikes: Int
  publishingStatus: PublishingStatusType
}

type YouTubePostType implements SocialPostInterface {
  id: ID
  account: AccountType
  socialAccount: SocialAccountType
  dateCreated: DateTime
  publishingStatus: PublishingStatusType
  title: String!
  description: String!
  gallery: GalleryType!
  tags: [String!]!
  categoryId: String!
  language: String!
  madeForKids: Boolean!
  privacyStatus: YoutubeYouTubePostPrivacyStatusChoices!
  submissions: [YouTubePostSubmissionType]
  dateUpdated: DateTime
  createdHow: String
  platform: String
  preview: String
  media: MediaType
  dateDeleted: DateTime
}

"""
An enumeration.
"""
enum YoutubeYouTubePostPrivacyStatusChoices {
  """
  Private
  """
  PRIVATE

  """
  Public
  """
  PUBLIC

  """
  Unlisted
  """
  UNLISTED
}
